/* automatically generated by rust-bindgen 0.65.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type char32_t = u32;
pub type char16_t = u16;
pub const GDEXTENSION_VARIANT_TYPE_NIL: GDExtensionVariantType = 0;
pub const GDEXTENSION_VARIANT_TYPE_BOOL: GDExtensionVariantType = 1;
pub const GDEXTENSION_VARIANT_TYPE_INT: GDExtensionVariantType = 2;
pub const GDEXTENSION_VARIANT_TYPE_FLOAT: GDExtensionVariantType = 3;
pub const GDEXTENSION_VARIANT_TYPE_STRING: GDExtensionVariantType = 4;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR2: GDExtensionVariantType = 5;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR2I: GDExtensionVariantType = 6;
pub const GDEXTENSION_VARIANT_TYPE_RECT2: GDExtensionVariantType = 7;
pub const GDEXTENSION_VARIANT_TYPE_RECT2I: GDExtensionVariantType = 8;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR3: GDExtensionVariantType = 9;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR3I: GDExtensionVariantType = 10;
pub const GDEXTENSION_VARIANT_TYPE_TRANSFORM2D: GDExtensionVariantType = 11;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR4: GDExtensionVariantType = 12;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR4I: GDExtensionVariantType = 13;
pub const GDEXTENSION_VARIANT_TYPE_PLANE: GDExtensionVariantType = 14;
pub const GDEXTENSION_VARIANT_TYPE_QUATERNION: GDExtensionVariantType = 15;
pub const GDEXTENSION_VARIANT_TYPE_AABB: GDExtensionVariantType = 16;
pub const GDEXTENSION_VARIANT_TYPE_BASIS: GDExtensionVariantType = 17;
pub const GDEXTENSION_VARIANT_TYPE_TRANSFORM3D: GDExtensionVariantType = 18;
pub const GDEXTENSION_VARIANT_TYPE_PROJECTION: GDExtensionVariantType = 19;
pub const GDEXTENSION_VARIANT_TYPE_COLOR: GDExtensionVariantType = 20;
pub const GDEXTENSION_VARIANT_TYPE_STRING_NAME: GDExtensionVariantType = 21;
pub const GDEXTENSION_VARIANT_TYPE_NODE_PATH: GDExtensionVariantType = 22;
pub const GDEXTENSION_VARIANT_TYPE_RID: GDExtensionVariantType = 23;
pub const GDEXTENSION_VARIANT_TYPE_OBJECT: GDExtensionVariantType = 24;
pub const GDEXTENSION_VARIANT_TYPE_CALLABLE: GDExtensionVariantType = 25;
pub const GDEXTENSION_VARIANT_TYPE_SIGNAL: GDExtensionVariantType = 26;
pub const GDEXTENSION_VARIANT_TYPE_DICTIONARY: GDExtensionVariantType = 27;
pub const GDEXTENSION_VARIANT_TYPE_ARRAY: GDExtensionVariantType = 28;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY: GDExtensionVariantType = 29;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY: GDExtensionVariantType = 30;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY: GDExtensionVariantType = 31;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY: GDExtensionVariantType = 32;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY: GDExtensionVariantType = 33;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY: GDExtensionVariantType = 34;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY: GDExtensionVariantType = 35;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY: GDExtensionVariantType = 36;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY: GDExtensionVariantType = 37;
pub const GDEXTENSION_VARIANT_TYPE_VARIANT_MAX: GDExtensionVariantType = 38;
pub type GDExtensionVariantType = ::std::os::raw::c_uint;
pub const GDEXTENSION_VARIANT_OP_EQUAL: GDExtensionVariantOperator = 0;
pub const GDEXTENSION_VARIANT_OP_NOT_EQUAL: GDExtensionVariantOperator = 1;
pub const GDEXTENSION_VARIANT_OP_LESS: GDExtensionVariantOperator = 2;
pub const GDEXTENSION_VARIANT_OP_LESS_EQUAL: GDExtensionVariantOperator = 3;
pub const GDEXTENSION_VARIANT_OP_GREATER: GDExtensionVariantOperator = 4;
pub const GDEXTENSION_VARIANT_OP_GREATER_EQUAL: GDExtensionVariantOperator = 5;
pub const GDEXTENSION_VARIANT_OP_ADD: GDExtensionVariantOperator = 6;
pub const GDEXTENSION_VARIANT_OP_SUBTRACT: GDExtensionVariantOperator = 7;
pub const GDEXTENSION_VARIANT_OP_MULTIPLY: GDExtensionVariantOperator = 8;
pub const GDEXTENSION_VARIANT_OP_DIVIDE: GDExtensionVariantOperator = 9;
pub const GDEXTENSION_VARIANT_OP_NEGATE: GDExtensionVariantOperator = 10;
pub const GDEXTENSION_VARIANT_OP_POSITIVE: GDExtensionVariantOperator = 11;
pub const GDEXTENSION_VARIANT_OP_MODULE: GDExtensionVariantOperator = 12;
pub const GDEXTENSION_VARIANT_OP_POWER: GDExtensionVariantOperator = 13;
pub const GDEXTENSION_VARIANT_OP_SHIFT_LEFT: GDExtensionVariantOperator = 14;
pub const GDEXTENSION_VARIANT_OP_SHIFT_RIGHT: GDExtensionVariantOperator = 15;
pub const GDEXTENSION_VARIANT_OP_BIT_AND: GDExtensionVariantOperator = 16;
pub const GDEXTENSION_VARIANT_OP_BIT_OR: GDExtensionVariantOperator = 17;
pub const GDEXTENSION_VARIANT_OP_BIT_XOR: GDExtensionVariantOperator = 18;
pub const GDEXTENSION_VARIANT_OP_BIT_NEGATE: GDExtensionVariantOperator = 19;
pub const GDEXTENSION_VARIANT_OP_AND: GDExtensionVariantOperator = 20;
pub const GDEXTENSION_VARIANT_OP_OR: GDExtensionVariantOperator = 21;
pub const GDEXTENSION_VARIANT_OP_XOR: GDExtensionVariantOperator = 22;
pub const GDEXTENSION_VARIANT_OP_NOT: GDExtensionVariantOperator = 23;
pub const GDEXTENSION_VARIANT_OP_IN: GDExtensionVariantOperator = 24;
pub const GDEXTENSION_VARIANT_OP_MAX: GDExtensionVariantOperator = 25;
pub type GDExtensionVariantOperator = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextVariant {
    _unused: [u8; 0],
}
pub type GDExtensionVariantPtr = *mut __GdextVariant;
pub type GDExtensionConstVariantPtr = *const __GdextVariant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextStringName {
    _unused: [u8; 0],
}
pub type GDExtensionStringNamePtr = *mut __GdextStringName;
pub type GDExtensionConstStringNamePtr = *const __GdextStringName;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextString {
    _unused: [u8; 0],
}
pub type GDExtensionStringPtr = *mut __GdextString;
pub type GDExtensionConstStringPtr = *const __GdextString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextObject {
    _unused: [u8; 0],
}
pub type GDExtensionObjectPtr = *mut __GdextObject;
pub type GDExtensionConstObjectPtr = *const __GdextObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextType {
    _unused: [u8; 0],
}
pub type GDExtensionTypePtr = *mut __GdextType;
pub type GDExtensionConstTypePtr = *const __GdextType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextMethodBind {
    _unused: [u8; 0],
}
pub type GDExtensionMethodBindPtr = *const __GdextMethodBind;
pub type GDExtensionInt = i64;
pub type GDExtensionBool = u8;
pub type GDObjectInstanceID = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextRef {
    _unused: [u8; 0],
}
pub type GDExtensionRefPtr = *mut __GdextRef;
pub type GDExtensionConstRefPtr = *const __GdextRef;
pub const GDEXTENSION_CALL_OK: GDExtensionCallErrorType = 0;
pub const GDEXTENSION_CALL_ERROR_INVALID_METHOD: GDExtensionCallErrorType = 1;
pub const GDEXTENSION_CALL_ERROR_INVALID_ARGUMENT: GDExtensionCallErrorType = 2;
pub const GDEXTENSION_CALL_ERROR_TOO_MANY_ARGUMENTS: GDExtensionCallErrorType = 3;
pub const GDEXTENSION_CALL_ERROR_TOO_FEW_ARGUMENTS: GDExtensionCallErrorType = 4;
pub const GDEXTENSION_CALL_ERROR_INSTANCE_IS_NULL: GDExtensionCallErrorType = 5;
pub const GDEXTENSION_CALL_ERROR_METHOD_NOT_CONST: GDExtensionCallErrorType = 6;
pub type GDExtensionCallErrorType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDExtensionCallError {
    pub error: GDExtensionCallErrorType,
    pub argument: i32,
    pub expected: i32,
}
#[test]
fn bindgen_test_layout_GDExtensionCallError() {
    const UNINIT: ::std::mem::MaybeUninit<GDExtensionCallError> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GDExtensionCallError>(),
        12usize,
        concat!("Size of: ", stringify!(GDExtensionCallError))
    );
    assert_eq!(
        ::std::mem::align_of::<GDExtensionCallError>(),
        4usize,
        concat!("Alignment of ", stringify!(GDExtensionCallError))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionCallError),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argument) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionCallError),
            "::",
            stringify!(argument)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expected) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionCallError),
            "::",
            stringify!(expected)
        )
    );
}
pub type GDExtensionVariantFromTypeConstructorFunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: GDExtensionVariantPtr, arg2: GDExtensionTypePtr),
>;
pub type GDExtensionTypeFromVariantConstructorFunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: GDExtensionTypePtr, arg2: GDExtensionVariantPtr),
>;
pub type GDExtensionPtrOperatorEvaluator = ::std::option::Option<
    unsafe extern "C" fn(
        p_left: GDExtensionConstTypePtr,
        p_right: GDExtensionConstTypePtr,
        r_result: GDExtensionTypePtr,
    ),
>;
pub type GDExtensionPtrBuiltInMethod = ::std::option::Option<
    unsafe extern "C" fn(
        p_base: GDExtensionTypePtr,
        p_args: *const GDExtensionConstTypePtr,
        r_return: GDExtensionTypePtr,
        p_argument_count: ::std::os::raw::c_int,
    ),
>;
pub type GDExtensionPtrConstructor = ::std::option::Option<
    unsafe extern "C" fn(p_base: GDExtensionTypePtr, p_args: *const GDExtensionConstTypePtr),
>;
pub type GDExtensionPtrDestructor =
    ::std::option::Option<unsafe extern "C" fn(p_base: GDExtensionTypePtr)>;
pub type GDExtensionPtrSetter = ::std::option::Option<
    unsafe extern "C" fn(p_base: GDExtensionTypePtr, p_value: GDExtensionConstTypePtr),
>;
pub type GDExtensionPtrGetter = ::std::option::Option<
    unsafe extern "C" fn(p_base: GDExtensionConstTypePtr, r_value: GDExtensionTypePtr),
>;
pub type GDExtensionPtrIndexedSetter = ::std::option::Option<
    unsafe extern "C" fn(
        p_base: GDExtensionTypePtr,
        p_index: GDExtensionInt,
        p_value: GDExtensionConstTypePtr,
    ),
>;
pub type GDExtensionPtrIndexedGetter = ::std::option::Option<
    unsafe extern "C" fn(
        p_base: GDExtensionConstTypePtr,
        p_index: GDExtensionInt,
        r_value: GDExtensionTypePtr,
    ),
>;
pub type GDExtensionPtrKeyedSetter = ::std::option::Option<
    unsafe extern "C" fn(
        p_base: GDExtensionTypePtr,
        p_key: GDExtensionConstTypePtr,
        p_value: GDExtensionConstTypePtr,
    ),
>;
pub type GDExtensionPtrKeyedGetter = ::std::option::Option<
    unsafe extern "C" fn(
        p_base: GDExtensionConstTypePtr,
        p_key: GDExtensionConstTypePtr,
        r_value: GDExtensionTypePtr,
    ),
>;
pub type GDExtensionPtrKeyedChecker = ::std::option::Option<
    unsafe extern "C" fn(
        p_base: GDExtensionConstVariantPtr,
        p_key: GDExtensionConstVariantPtr,
    ) -> u32,
>;
pub type GDExtensionPtrUtilityFunction = ::std::option::Option<
    unsafe extern "C" fn(
        r_return: GDExtensionTypePtr,
        p_args: *const GDExtensionConstTypePtr,
        p_argument_count: ::std::os::raw::c_int,
    ),
>;
pub type GDExtensionClassConstructor =
    ::std::option::Option<unsafe extern "C" fn() -> GDExtensionObjectPtr>;
pub type GDExtensionInstanceBindingCreateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        p_token: *mut ::std::os::raw::c_void,
        p_instance: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type GDExtensionInstanceBindingFreeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        p_token: *mut ::std::os::raw::c_void,
        p_instance: *mut ::std::os::raw::c_void,
        p_binding: *mut ::std::os::raw::c_void,
    ),
>;
pub type GDExtensionInstanceBindingReferenceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        p_token: *mut ::std::os::raw::c_void,
        p_binding: *mut ::std::os::raw::c_void,
        p_reference: GDExtensionBool,
    ) -> GDExtensionBool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDExtensionInstanceBindingCallbacks {
    pub create_callback: GDExtensionInstanceBindingCreateCallback,
    pub free_callback: GDExtensionInstanceBindingFreeCallback,
    pub reference_callback: GDExtensionInstanceBindingReferenceCallback,
}
#[test]
fn bindgen_test_layout_GDExtensionInstanceBindingCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<GDExtensionInstanceBindingCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GDExtensionInstanceBindingCallbacks>(),
        24usize,
        concat!("Size of: ", stringify!(GDExtensionInstanceBindingCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<GDExtensionInstanceBindingCallbacks>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GDExtensionInstanceBindingCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_callback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInstanceBindingCallbacks),
            "::",
            stringify!(create_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_callback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInstanceBindingCallbacks),
            "::",
            stringify!(free_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_callback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInstanceBindingCallbacks),
            "::",
            stringify!(reference_callback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextClassInstance {
    _unused: [u8; 0],
}
pub type GDExtensionClassInstancePtr = *mut __GdextClassInstance;
pub type GDExtensionClassSet = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionClassInstancePtr,
        p_name: GDExtensionConstStringNamePtr,
        p_value: GDExtensionConstVariantPtr,
    ) -> GDExtensionBool,
>;
pub type GDExtensionClassGet = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionClassInstancePtr,
        p_name: GDExtensionConstStringNamePtr,
        r_ret: GDExtensionVariantPtr,
    ) -> GDExtensionBool,
>;
pub type GDExtensionClassGetRID =
    ::std::option::Option<unsafe extern "C" fn(p_instance: GDExtensionClassInstancePtr) -> u64>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDExtensionPropertyInfo {
    pub type_: GDExtensionVariantType,
    pub name: GDExtensionStringNamePtr,
    pub class_name: GDExtensionStringNamePtr,
    pub hint: u32,
    pub hint_string: GDExtensionStringPtr,
    pub usage: u32,
}
#[test]
fn bindgen_test_layout_GDExtensionPropertyInfo() {
    const UNINIT: ::std::mem::MaybeUninit<GDExtensionPropertyInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GDExtensionPropertyInfo>(),
        48usize,
        concat!("Size of: ", stringify!(GDExtensionPropertyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<GDExtensionPropertyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(GDExtensionPropertyInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionPropertyInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionPropertyInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionPropertyInfo),
            "::",
            stringify!(class_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionPropertyInfo),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint_string) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionPropertyInfo),
            "::",
            stringify!(hint_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionPropertyInfo),
            "::",
            stringify!(usage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDExtensionMethodInfo {
    pub name: GDExtensionStringNamePtr,
    pub return_value: GDExtensionPropertyInfo,
    pub flags: u32,
    pub id: i32,
    pub argument_count: u32,
    pub arguments: *mut GDExtensionPropertyInfo,
    pub default_argument_count: u32,
    pub default_arguments: *mut GDExtensionVariantPtr,
}
#[test]
fn bindgen_test_layout_GDExtensionMethodInfo() {
    const UNINIT: ::std::mem::MaybeUninit<GDExtensionMethodInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GDExtensionMethodInfo>(),
        96usize,
        concat!("Size of: ", stringify!(GDExtensionMethodInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<GDExtensionMethodInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(GDExtensionMethodInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionMethodInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionMethodInfo),
            "::",
            stringify!(return_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionMethodInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionMethodInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argument_count) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionMethodInfo),
            "::",
            stringify!(argument_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arguments) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionMethodInfo),
            "::",
            stringify!(arguments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_argument_count) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionMethodInfo),
            "::",
            stringify!(default_argument_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_arguments) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionMethodInfo),
            "::",
            stringify!(default_arguments)
        )
    );
}
pub type GDExtensionClassGetPropertyList = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionClassInstancePtr,
        r_count: *mut u32,
    ) -> *const GDExtensionPropertyInfo,
>;
pub type GDExtensionClassFreePropertyList = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionClassInstancePtr,
        p_list: *const GDExtensionPropertyInfo,
    ),
>;
pub type GDExtensionClassPropertyCanRevert = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionClassInstancePtr,
        p_name: GDExtensionConstStringNamePtr,
    ) -> GDExtensionBool,
>;
pub type GDExtensionClassPropertyGetRevert = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionClassInstancePtr,
        p_name: GDExtensionConstStringNamePtr,
        r_ret: GDExtensionVariantPtr,
    ) -> GDExtensionBool,
>;
pub type GDExtensionClassNotification = ::std::option::Option<
    unsafe extern "C" fn(p_instance: GDExtensionClassInstancePtr, p_what: i32),
>;
pub type GDExtensionClassToString = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionClassInstancePtr,
        r_is_valid: *mut GDExtensionBool,
        p_out: GDExtensionStringPtr,
    ),
>;
pub type GDExtensionClassReference =
    ::std::option::Option<unsafe extern "C" fn(p_instance: GDExtensionClassInstancePtr)>;
pub type GDExtensionClassUnreference =
    ::std::option::Option<unsafe extern "C" fn(p_instance: GDExtensionClassInstancePtr)>;
pub type GDExtensionClassCallVirtual = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionClassInstancePtr,
        p_args: *const GDExtensionConstTypePtr,
        r_ret: GDExtensionTypePtr,
    ),
>;
pub type GDExtensionClassCreateInstance = ::std::option::Option<
    unsafe extern "C" fn(p_userdata: *mut ::std::os::raw::c_void) -> GDExtensionObjectPtr,
>;
pub type GDExtensionClassFreeInstance = ::std::option::Option<
    unsafe extern "C" fn(
        p_userdata: *mut ::std::os::raw::c_void,
        p_instance: GDExtensionClassInstancePtr,
    ),
>;
pub type GDExtensionClassGetVirtual = ::std::option::Option<
    unsafe extern "C" fn(
        p_userdata: *mut ::std::os::raw::c_void,
        p_name: GDExtensionConstStringNamePtr,
    ) -> GDExtensionClassCallVirtual,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDExtensionClassCreationInfo {
    pub is_virtual: GDExtensionBool,
    pub is_abstract: GDExtensionBool,
    pub set_func: GDExtensionClassSet,
    pub get_func: GDExtensionClassGet,
    pub get_property_list_func: GDExtensionClassGetPropertyList,
    pub free_property_list_func: GDExtensionClassFreePropertyList,
    pub property_can_revert_func: GDExtensionClassPropertyCanRevert,
    pub property_get_revert_func: GDExtensionClassPropertyGetRevert,
    pub notification_func: GDExtensionClassNotification,
    pub to_string_func: GDExtensionClassToString,
    pub reference_func: GDExtensionClassReference,
    pub unreference_func: GDExtensionClassUnreference,
    pub create_instance_func: GDExtensionClassCreateInstance,
    pub free_instance_func: GDExtensionClassFreeInstance,
    pub get_virtual_func: GDExtensionClassGetVirtual,
    pub get_rid_func: GDExtensionClassGetRID,
    pub class_userdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_GDExtensionClassCreationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<GDExtensionClassCreationInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GDExtensionClassCreationInfo>(),
        128usize,
        concat!("Size of: ", stringify!(GDExtensionClassCreationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<GDExtensionClassCreationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(GDExtensionClassCreationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_virtual) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(is_virtual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_abstract) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(is_abstract)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(set_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(get_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property_list_func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(get_property_list_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_property_list_func) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(free_property_list_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_can_revert_func) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(property_can_revert_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_get_revert_func) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(property_get_revert_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notification_func) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(notification_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_string_func) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(to_string_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_func) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(reference_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unreference_func) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(unreference_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_instance_func) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(create_instance_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_instance_func) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(free_instance_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_virtual_func) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(get_virtual_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_rid_func) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(get_rid_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_userdata) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassCreationInfo),
            "::",
            stringify!(class_userdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextClassLibrary {
    _unused: [u8; 0],
}
pub type GDExtensionClassLibraryPtr = *mut __GdextClassLibrary;
pub const GDEXTENSION_METHOD_FLAG_NORMAL: GDExtensionClassMethodFlags = 1;
pub const GDEXTENSION_METHOD_FLAG_EDITOR: GDExtensionClassMethodFlags = 2;
pub const GDEXTENSION_METHOD_FLAG_CONST: GDExtensionClassMethodFlags = 4;
pub const GDEXTENSION_METHOD_FLAG_VIRTUAL: GDExtensionClassMethodFlags = 8;
pub const GDEXTENSION_METHOD_FLAG_VARARG: GDExtensionClassMethodFlags = 16;
pub const GDEXTENSION_METHOD_FLAG_STATIC: GDExtensionClassMethodFlags = 32;
pub const GDEXTENSION_METHOD_FLAGS_DEFAULT: GDExtensionClassMethodFlags = 1;
pub type GDExtensionClassMethodFlags = ::std::os::raw::c_uint;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_NONE: GDExtensionClassMethodArgumentMetadata = 0;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT8: GDExtensionClassMethodArgumentMetadata =
    1;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT16:
    GDExtensionClassMethodArgumentMetadata = 2;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT32:
    GDExtensionClassMethodArgumentMetadata = 3;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT64:
    GDExtensionClassMethodArgumentMetadata = 4;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT8:
    GDExtensionClassMethodArgumentMetadata = 5;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT16:
    GDExtensionClassMethodArgumentMetadata = 6;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT32:
    GDExtensionClassMethodArgumentMetadata = 7;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT64:
    GDExtensionClassMethodArgumentMetadata = 8;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_FLOAT:
    GDExtensionClassMethodArgumentMetadata = 9;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_DOUBLE:
    GDExtensionClassMethodArgumentMetadata = 10;
pub type GDExtensionClassMethodArgumentMetadata = ::std::os::raw::c_uint;
pub type GDExtensionClassMethodCall = ::std::option::Option<
    unsafe extern "C" fn(
        method_userdata: *mut ::std::os::raw::c_void,
        p_instance: GDExtensionClassInstancePtr,
        p_args: *const GDExtensionConstVariantPtr,
        p_argument_count: GDExtensionInt,
        r_return: GDExtensionVariantPtr,
        r_error: *mut GDExtensionCallError,
    ),
>;
pub type GDExtensionClassMethodPtrCall = ::std::option::Option<
    unsafe extern "C" fn(
        method_userdata: *mut ::std::os::raw::c_void,
        p_instance: GDExtensionClassInstancePtr,
        p_args: *const GDExtensionConstTypePtr,
        r_ret: GDExtensionTypePtr,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDExtensionClassMethodInfo {
    pub name: GDExtensionStringNamePtr,
    pub method_userdata: *mut ::std::os::raw::c_void,
    pub call_func: GDExtensionClassMethodCall,
    pub ptrcall_func: GDExtensionClassMethodPtrCall,
    pub method_flags: u32,
    pub has_return_value: GDExtensionBool,
    pub return_value_info: *mut GDExtensionPropertyInfo,
    pub return_value_metadata: GDExtensionClassMethodArgumentMetadata,
    pub argument_count: u32,
    pub arguments_info: *mut GDExtensionPropertyInfo,
    pub arguments_metadata: *mut GDExtensionClassMethodArgumentMetadata,
    pub default_argument_count: u32,
    pub default_arguments: *mut GDExtensionVariantPtr,
}
#[test]
fn bindgen_test_layout_GDExtensionClassMethodInfo() {
    const UNINIT: ::std::mem::MaybeUninit<GDExtensionClassMethodInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GDExtensionClassMethodInfo>(),
        88usize,
        concat!("Size of: ", stringify!(GDExtensionClassMethodInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<GDExtensionClassMethodInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(GDExtensionClassMethodInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_userdata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(method_userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(call_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptrcall_func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(ptrcall_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(method_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_return_value) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(has_return_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_value_info) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(return_value_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).return_value_metadata) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(return_value_metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argument_count) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(argument_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arguments_info) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(arguments_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arguments_metadata) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(arguments_metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_argument_count) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(default_argument_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_arguments) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionClassMethodInfo),
            "::",
            stringify!(default_arguments)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextScriptInstanceData {
    _unused: [u8; 0],
}
pub type GDExtensionScriptInstanceDataPtr = *mut __GdextScriptInstanceData;
pub type GDExtensionScriptInstanceSet = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        p_name: GDExtensionConstStringNamePtr,
        p_value: GDExtensionConstVariantPtr,
    ) -> GDExtensionBool,
>;
pub type GDExtensionScriptInstanceGet = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        p_name: GDExtensionConstStringNamePtr,
        r_ret: GDExtensionVariantPtr,
    ) -> GDExtensionBool,
>;
pub type GDExtensionScriptInstanceGetPropertyList = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        r_count: *mut u32,
    ) -> *const GDExtensionPropertyInfo,
>;
pub type GDExtensionScriptInstanceFreePropertyList = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        p_list: *const GDExtensionPropertyInfo,
    ),
>;
pub type GDExtensionScriptInstanceGetPropertyType = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        p_name: GDExtensionConstStringNamePtr,
        r_is_valid: *mut GDExtensionBool,
    ) -> GDExtensionVariantType,
>;
pub type GDExtensionScriptInstancePropertyCanRevert = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        p_name: GDExtensionConstStringNamePtr,
    ) -> GDExtensionBool,
>;
pub type GDExtensionScriptInstancePropertyGetRevert = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        p_name: GDExtensionConstStringNamePtr,
        r_ret: GDExtensionVariantPtr,
    ) -> GDExtensionBool,
>;
pub type GDExtensionScriptInstanceGetOwner = ::std::option::Option<
    unsafe extern "C" fn(p_instance: GDExtensionScriptInstanceDataPtr) -> GDExtensionObjectPtr,
>;
pub type GDExtensionScriptInstancePropertyStateAdd = ::std::option::Option<
    unsafe extern "C" fn(
        p_name: GDExtensionConstStringNamePtr,
        p_value: GDExtensionConstVariantPtr,
        p_userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type GDExtensionScriptInstanceGetPropertyState = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        p_add_func: GDExtensionScriptInstancePropertyStateAdd,
        p_userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type GDExtensionScriptInstanceGetMethodList = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        r_count: *mut u32,
    ) -> *const GDExtensionMethodInfo,
>;
pub type GDExtensionScriptInstanceFreeMethodList = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        p_list: *const GDExtensionMethodInfo,
    ),
>;
pub type GDExtensionScriptInstanceHasMethod = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        p_name: GDExtensionConstStringNamePtr,
    ) -> GDExtensionBool,
>;
pub type GDExtensionScriptInstanceCall = ::std::option::Option<
    unsafe extern "C" fn(
        p_self: GDExtensionScriptInstanceDataPtr,
        p_method: GDExtensionConstStringNamePtr,
        p_args: *const GDExtensionConstVariantPtr,
        p_argument_count: GDExtensionInt,
        r_return: GDExtensionVariantPtr,
        r_error: *mut GDExtensionCallError,
    ),
>;
pub type GDExtensionScriptInstanceNotification = ::std::option::Option<
    unsafe extern "C" fn(p_instance: GDExtensionScriptInstanceDataPtr, p_what: i32),
>;
pub type GDExtensionScriptInstanceToString = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
        r_is_valid: *mut GDExtensionBool,
        r_out: GDExtensionStringPtr,
    ),
>;
pub type GDExtensionScriptInstanceRefCountIncremented =
    ::std::option::Option<unsafe extern "C" fn(p_instance: GDExtensionScriptInstanceDataPtr)>;
pub type GDExtensionScriptInstanceRefCountDecremented = ::std::option::Option<
    unsafe extern "C" fn(p_instance: GDExtensionScriptInstanceDataPtr) -> GDExtensionBool,
>;
pub type GDExtensionScriptInstanceGetScript = ::std::option::Option<
    unsafe extern "C" fn(p_instance: GDExtensionScriptInstanceDataPtr) -> GDExtensionObjectPtr,
>;
pub type GDExtensionScriptInstanceIsPlaceholder = ::std::option::Option<
    unsafe extern "C" fn(p_instance: GDExtensionScriptInstanceDataPtr) -> GDExtensionBool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextScriptLanguage {
    _unused: [u8; 0],
}
pub type GDExtensionScriptLanguagePtr = *mut __GdextScriptLanguage;
pub type GDExtensionScriptInstanceGetLanguage = ::std::option::Option<
    unsafe extern "C" fn(
        p_instance: GDExtensionScriptInstanceDataPtr,
    ) -> GDExtensionScriptLanguagePtr,
>;
pub type GDExtensionScriptInstanceFree =
    ::std::option::Option<unsafe extern "C" fn(p_instance: GDExtensionScriptInstanceDataPtr)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GdextScriptInstance {
    _unused: [u8; 0],
}
pub type GDExtensionScriptInstancePtr = *mut __GdextScriptInstance;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDExtensionScriptInstanceInfo {
    pub set_func: GDExtensionScriptInstanceSet,
    pub get_func: GDExtensionScriptInstanceGet,
    pub get_property_list_func: GDExtensionScriptInstanceGetPropertyList,
    pub free_property_list_func: GDExtensionScriptInstanceFreePropertyList,
    pub property_can_revert_func: GDExtensionScriptInstancePropertyCanRevert,
    pub property_get_revert_func: GDExtensionScriptInstancePropertyGetRevert,
    pub get_owner_func: GDExtensionScriptInstanceGetOwner,
    pub get_property_state_func: GDExtensionScriptInstanceGetPropertyState,
    pub get_method_list_func: GDExtensionScriptInstanceGetMethodList,
    pub free_method_list_func: GDExtensionScriptInstanceFreeMethodList,
    pub get_property_type_func: GDExtensionScriptInstanceGetPropertyType,
    pub has_method_func: GDExtensionScriptInstanceHasMethod,
    pub call_func: GDExtensionScriptInstanceCall,
    pub notification_func: GDExtensionScriptInstanceNotification,
    pub to_string_func: GDExtensionScriptInstanceToString,
    pub refcount_incremented_func: GDExtensionScriptInstanceRefCountIncremented,
    pub refcount_decremented_func: GDExtensionScriptInstanceRefCountDecremented,
    pub get_script_func: GDExtensionScriptInstanceGetScript,
    pub is_placeholder_func: GDExtensionScriptInstanceIsPlaceholder,
    pub set_fallback_func: GDExtensionScriptInstanceSet,
    pub get_fallback_func: GDExtensionScriptInstanceGet,
    pub get_language_func: GDExtensionScriptInstanceGetLanguage,
    pub free_func: GDExtensionScriptInstanceFree,
}
#[test]
fn bindgen_test_layout_GDExtensionScriptInstanceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<GDExtensionScriptInstanceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GDExtensionScriptInstanceInfo>(),
        184usize,
        concat!("Size of: ", stringify!(GDExtensionScriptInstanceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<GDExtensionScriptInstanceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(GDExtensionScriptInstanceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(set_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(get_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property_list_func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(get_property_list_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_property_list_func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(free_property_list_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_can_revert_func) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(property_can_revert_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_get_revert_func) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(property_get_revert_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_owner_func) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(get_owner_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property_state_func) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(get_property_state_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_method_list_func) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(get_method_list_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_method_list_func) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(free_method_list_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property_type_func) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(get_property_type_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_method_func) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(has_method_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).call_func) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(call_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notification_func) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(notification_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_string_func) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(to_string_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount_incremented_func) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(refcount_incremented_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount_decremented_func) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(refcount_decremented_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_script_func) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(get_script_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_placeholder_func) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(is_placeholder_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_fallback_func) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(set_fallback_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_fallback_func) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(get_fallback_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_language_func) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(get_language_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_func) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionScriptInstanceInfo),
            "::",
            stringify!(free_func)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDExtensionInterface {
    pub version_major: u32,
    pub version_minor: u32,
    pub version_patch: u32,
    pub version_string: *const ::std::os::raw::c_char,
    pub mem_alloc:
        ::std::option::Option<unsafe extern "C" fn(p_bytes: usize) -> *mut ::std::os::raw::c_void>,
    pub mem_realloc: ::std::option::Option<
        unsafe extern "C" fn(
            p_ptr: *mut ::std::os::raw::c_void,
            p_bytes: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub mem_free: ::std::option::Option<unsafe extern "C" fn(p_ptr: *mut ::std::os::raw::c_void)>,
    pub print_error: ::std::option::Option<
        unsafe extern "C" fn(
            p_description: *const ::std::os::raw::c_char,
            p_function: *const ::std::os::raw::c_char,
            p_file: *const ::std::os::raw::c_char,
            p_line: i32,
            p_editor_notify: GDExtensionBool,
        ),
    >,
    pub print_error_with_message: ::std::option::Option<
        unsafe extern "C" fn(
            p_description: *const ::std::os::raw::c_char,
            p_message: *const ::std::os::raw::c_char,
            p_function: *const ::std::os::raw::c_char,
            p_file: *const ::std::os::raw::c_char,
            p_line: i32,
            p_editor_notify: GDExtensionBool,
        ),
    >,
    pub print_warning: ::std::option::Option<
        unsafe extern "C" fn(
            p_description: *const ::std::os::raw::c_char,
            p_function: *const ::std::os::raw::c_char,
            p_file: *const ::std::os::raw::c_char,
            p_line: i32,
            p_editor_notify: GDExtensionBool,
        ),
    >,
    pub print_warning_with_message: ::std::option::Option<
        unsafe extern "C" fn(
            p_description: *const ::std::os::raw::c_char,
            p_message: *const ::std::os::raw::c_char,
            p_function: *const ::std::os::raw::c_char,
            p_file: *const ::std::os::raw::c_char,
            p_line: i32,
            p_editor_notify: GDExtensionBool,
        ),
    >,
    pub print_script_error: ::std::option::Option<
        unsafe extern "C" fn(
            p_description: *const ::std::os::raw::c_char,
            p_function: *const ::std::os::raw::c_char,
            p_file: *const ::std::os::raw::c_char,
            p_line: i32,
            p_editor_notify: GDExtensionBool,
        ),
    >,
    pub print_script_error_with_message: ::std::option::Option<
        unsafe extern "C" fn(
            p_description: *const ::std::os::raw::c_char,
            p_message: *const ::std::os::raw::c_char,
            p_function: *const ::std::os::raw::c_char,
            p_file: *const ::std::os::raw::c_char,
            p_line: i32,
            p_editor_notify: GDExtensionBool,
        ),
    >,
    pub get_native_struct_size:
        ::std::option::Option<unsafe extern "C" fn(p_name: GDExtensionConstStringNamePtr) -> u64>,
    pub variant_new_copy: ::std::option::Option<
        unsafe extern "C" fn(r_dest: GDExtensionVariantPtr, p_src: GDExtensionConstVariantPtr),
    >,
    pub variant_new_nil: ::std::option::Option<unsafe extern "C" fn(r_dest: GDExtensionVariantPtr)>,
    pub variant_destroy: ::std::option::Option<unsafe extern "C" fn(p_self: GDExtensionVariantPtr)>,
    pub variant_call: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionVariantPtr,
            p_method: GDExtensionConstStringNamePtr,
            p_args: *const GDExtensionConstVariantPtr,
            p_argument_count: GDExtensionInt,
            r_return: GDExtensionVariantPtr,
            r_error: *mut GDExtensionCallError,
        ),
    >,
    pub variant_call_static: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
            p_method: GDExtensionConstStringNamePtr,
            p_args: *const GDExtensionConstVariantPtr,
            p_argument_count: GDExtensionInt,
            r_return: GDExtensionVariantPtr,
            r_error: *mut GDExtensionCallError,
        ),
    >,
    pub variant_evaluate: ::std::option::Option<
        unsafe extern "C" fn(
            p_op: GDExtensionVariantOperator,
            p_a: GDExtensionConstVariantPtr,
            p_b: GDExtensionConstVariantPtr,
            r_return: GDExtensionVariantPtr,
            r_valid: *mut GDExtensionBool,
        ),
    >,
    pub variant_set: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionVariantPtr,
            p_key: GDExtensionConstVariantPtr,
            p_value: GDExtensionConstVariantPtr,
            r_valid: *mut GDExtensionBool,
        ),
    >,
    pub variant_set_named: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionVariantPtr,
            p_key: GDExtensionConstStringNamePtr,
            p_value: GDExtensionConstVariantPtr,
            r_valid: *mut GDExtensionBool,
        ),
    >,
    pub variant_set_keyed: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionVariantPtr,
            p_key: GDExtensionConstVariantPtr,
            p_value: GDExtensionConstVariantPtr,
            r_valid: *mut GDExtensionBool,
        ),
    >,
    pub variant_set_indexed: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionVariantPtr,
            p_index: GDExtensionInt,
            p_value: GDExtensionConstVariantPtr,
            r_valid: *mut GDExtensionBool,
            r_oob: *mut GDExtensionBool,
        ),
    >,
    pub variant_get: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            p_key: GDExtensionConstVariantPtr,
            r_ret: GDExtensionVariantPtr,
            r_valid: *mut GDExtensionBool,
        ),
    >,
    pub variant_get_named: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            p_key: GDExtensionConstStringNamePtr,
            r_ret: GDExtensionVariantPtr,
            r_valid: *mut GDExtensionBool,
        ),
    >,
    pub variant_get_keyed: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            p_key: GDExtensionConstVariantPtr,
            r_ret: GDExtensionVariantPtr,
            r_valid: *mut GDExtensionBool,
        ),
    >,
    pub variant_get_indexed: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            p_index: GDExtensionInt,
            r_ret: GDExtensionVariantPtr,
            r_valid: *mut GDExtensionBool,
            r_oob: *mut GDExtensionBool,
        ),
    >,
    pub variant_iter_init: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            r_iter: GDExtensionVariantPtr,
            r_valid: *mut GDExtensionBool,
        ) -> GDExtensionBool,
    >,
    pub variant_iter_next: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            r_iter: GDExtensionVariantPtr,
            r_valid: *mut GDExtensionBool,
        ) -> GDExtensionBool,
    >,
    pub variant_iter_get: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            r_iter: GDExtensionVariantPtr,
            r_ret: GDExtensionVariantPtr,
            r_valid: *mut GDExtensionBool,
        ),
    >,
    pub variant_hash: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionConstVariantPtr) -> GDExtensionInt,
    >,
    pub variant_recursive_hash: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            p_recursion_count: GDExtensionInt,
        ) -> GDExtensionInt,
    >,
    pub variant_hash_compare: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            p_other: GDExtensionConstVariantPtr,
        ) -> GDExtensionBool,
    >,
    pub variant_booleanize: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionConstVariantPtr) -> GDExtensionBool,
    >,
    pub variant_duplicate: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            r_ret: GDExtensionVariantPtr,
            p_deep: GDExtensionBool,
        ),
    >,
    pub variant_stringify: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionConstVariantPtr, r_ret: GDExtensionStringPtr),
    >,
    pub variant_get_type: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionConstVariantPtr) -> GDExtensionVariantType,
    >,
    pub variant_has_method: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            p_method: GDExtensionConstStringNamePtr,
        ) -> GDExtensionBool,
    >,
    pub variant_has_member: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
            p_member: GDExtensionConstStringNamePtr,
        ) -> GDExtensionBool,
    >,
    pub variant_has_key: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstVariantPtr,
            p_key: GDExtensionConstVariantPtr,
            r_valid: *mut GDExtensionBool,
        ) -> GDExtensionBool,
    >,
    pub variant_get_type_name: ::std::option::Option<
        unsafe extern "C" fn(p_type: GDExtensionVariantType, r_name: GDExtensionStringPtr),
    >,
    pub variant_can_convert: ::std::option::Option<
        unsafe extern "C" fn(
            p_from: GDExtensionVariantType,
            p_to: GDExtensionVariantType,
        ) -> GDExtensionBool,
    >,
    pub variant_can_convert_strict: ::std::option::Option<
        unsafe extern "C" fn(
            p_from: GDExtensionVariantType,
            p_to: GDExtensionVariantType,
        ) -> GDExtensionBool,
    >,
    pub get_variant_from_type_constructor: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
        ) -> GDExtensionVariantFromTypeConstructorFunc,
    >,
    pub get_variant_to_type_constructor: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
        ) -> GDExtensionTypeFromVariantConstructorFunc,
    >,
    pub variant_get_ptr_operator_evaluator: ::std::option::Option<
        unsafe extern "C" fn(
            p_operator: GDExtensionVariantOperator,
            p_type_a: GDExtensionVariantType,
            p_type_b: GDExtensionVariantType,
        ) -> GDExtensionPtrOperatorEvaluator,
    >,
    pub variant_get_ptr_builtin_method: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
            p_method: GDExtensionConstStringNamePtr,
            p_hash: GDExtensionInt,
        ) -> GDExtensionPtrBuiltInMethod,
    >,
    pub variant_get_ptr_constructor: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
            p_constructor: i32,
        ) -> GDExtensionPtrConstructor,
    >,
    pub variant_get_ptr_destructor: ::std::option::Option<
        unsafe extern "C" fn(p_type: GDExtensionVariantType) -> GDExtensionPtrDestructor,
    >,
    pub variant_construct: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
            p_base: GDExtensionVariantPtr,
            p_args: *const GDExtensionConstVariantPtr,
            p_argument_count: i32,
            r_error: *mut GDExtensionCallError,
        ),
    >,
    pub variant_get_ptr_setter: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
            p_member: GDExtensionConstStringNamePtr,
        ) -> GDExtensionPtrSetter,
    >,
    pub variant_get_ptr_getter: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
            p_member: GDExtensionConstStringNamePtr,
        ) -> GDExtensionPtrGetter,
    >,
    pub variant_get_ptr_indexed_setter: ::std::option::Option<
        unsafe extern "C" fn(p_type: GDExtensionVariantType) -> GDExtensionPtrIndexedSetter,
    >,
    pub variant_get_ptr_indexed_getter: ::std::option::Option<
        unsafe extern "C" fn(p_type: GDExtensionVariantType) -> GDExtensionPtrIndexedGetter,
    >,
    pub variant_get_ptr_keyed_setter: ::std::option::Option<
        unsafe extern "C" fn(p_type: GDExtensionVariantType) -> GDExtensionPtrKeyedSetter,
    >,
    pub variant_get_ptr_keyed_getter: ::std::option::Option<
        unsafe extern "C" fn(p_type: GDExtensionVariantType) -> GDExtensionPtrKeyedGetter,
    >,
    pub variant_get_ptr_keyed_checker: ::std::option::Option<
        unsafe extern "C" fn(p_type: GDExtensionVariantType) -> GDExtensionPtrKeyedChecker,
    >,
    pub variant_get_constant_value: ::std::option::Option<
        unsafe extern "C" fn(
            p_type: GDExtensionVariantType,
            p_constant: GDExtensionConstStringNamePtr,
            r_ret: GDExtensionVariantPtr,
        ),
    >,
    pub variant_get_ptr_utility_function: ::std::option::Option<
        unsafe extern "C" fn(
            p_function: GDExtensionConstStringNamePtr,
            p_hash: GDExtensionInt,
        ) -> GDExtensionPtrUtilityFunction,
    >,
    pub string_new_with_latin1_chars: ::std::option::Option<
        unsafe extern "C" fn(
            r_dest: GDExtensionStringPtr,
            p_contents: *const ::std::os::raw::c_char,
        ),
    >,
    pub string_new_with_utf8_chars: ::std::option::Option<
        unsafe extern "C" fn(
            r_dest: GDExtensionStringPtr,
            p_contents: *const ::std::os::raw::c_char,
        ),
    >,
    pub string_new_with_utf16_chars: ::std::option::Option<
        unsafe extern "C" fn(r_dest: GDExtensionStringPtr, p_contents: *const char16_t),
    >,
    pub string_new_with_utf32_chars: ::std::option::Option<
        unsafe extern "C" fn(r_dest: GDExtensionStringPtr, p_contents: *const char32_t),
    >,
    pub string_new_with_wide_chars: ::std::option::Option<
        unsafe extern "C" fn(r_dest: GDExtensionStringPtr, p_contents: *const wchar_t),
    >,
    pub string_new_with_latin1_chars_and_len: ::std::option::Option<
        unsafe extern "C" fn(
            r_dest: GDExtensionStringPtr,
            p_contents: *const ::std::os::raw::c_char,
            p_size: GDExtensionInt,
        ),
    >,
    pub string_new_with_utf8_chars_and_len: ::std::option::Option<
        unsafe extern "C" fn(
            r_dest: GDExtensionStringPtr,
            p_contents: *const ::std::os::raw::c_char,
            p_size: GDExtensionInt,
        ),
    >,
    pub string_new_with_utf16_chars_and_len: ::std::option::Option<
        unsafe extern "C" fn(
            r_dest: GDExtensionStringPtr,
            p_contents: *const char16_t,
            p_size: GDExtensionInt,
        ),
    >,
    pub string_new_with_utf32_chars_and_len: ::std::option::Option<
        unsafe extern "C" fn(
            r_dest: GDExtensionStringPtr,
            p_contents: *const char32_t,
            p_size: GDExtensionInt,
        ),
    >,
    pub string_new_with_wide_chars_and_len: ::std::option::Option<
        unsafe extern "C" fn(
            r_dest: GDExtensionStringPtr,
            p_contents: *const wchar_t,
            p_size: GDExtensionInt,
        ),
    >,
    pub string_to_latin1_chars: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstStringPtr,
            r_text: *mut ::std::os::raw::c_char,
            p_max_write_length: GDExtensionInt,
        ) -> GDExtensionInt,
    >,
    pub string_to_utf8_chars: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstStringPtr,
            r_text: *mut ::std::os::raw::c_char,
            p_max_write_length: GDExtensionInt,
        ) -> GDExtensionInt,
    >,
    pub string_to_utf16_chars: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstStringPtr,
            r_text: *mut char16_t,
            p_max_write_length: GDExtensionInt,
        ) -> GDExtensionInt,
    >,
    pub string_to_utf32_chars: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstStringPtr,
            r_text: *mut char32_t,
            p_max_write_length: GDExtensionInt,
        ) -> GDExtensionInt,
    >,
    pub string_to_wide_chars: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstStringPtr,
            r_text: *mut wchar_t,
            p_max_write_length: GDExtensionInt,
        ) -> GDExtensionInt,
    >,
    pub string_operator_index: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionStringPtr,
            p_index: GDExtensionInt,
        ) -> *mut char32_t,
    >,
    pub string_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstStringPtr,
            p_index: GDExtensionInt,
        ) -> *const char32_t,
    >,
    pub string_operator_plus_eq_string: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionStringPtr, p_b: GDExtensionConstStringPtr),
    >,
    pub string_operator_plus_eq_char:
        ::std::option::Option<unsafe extern "C" fn(p_self: GDExtensionStringPtr, p_b: char32_t)>,
    pub string_operator_plus_eq_cstr: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionStringPtr, p_b: *const ::std::os::raw::c_char),
    >,
    pub string_operator_plus_eq_wcstr: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionStringPtr, p_b: *const wchar_t),
    >,
    pub string_operator_plus_eq_c32str: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionStringPtr, p_b: *const char32_t),
    >,
    pub xml_parser_open_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            p_instance: GDExtensionObjectPtr,
            p_buffer: *const u8,
            p_size: usize,
        ) -> GDExtensionInt,
    >,
    pub file_access_store_buffer: ::std::option::Option<
        unsafe extern "C" fn(p_instance: GDExtensionObjectPtr, p_src: *const u8, p_length: u64),
    >,
    pub file_access_get_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            p_instance: GDExtensionConstObjectPtr,
            p_dst: *mut u8,
            p_length: u64,
        ) -> u64,
    >,
    pub worker_thread_pool_add_native_group_task: ::std::option::Option<
        unsafe extern "C" fn(
            p_instance: GDExtensionObjectPtr,
            p_func: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: u32),
            >,
            p_userdata: *mut ::std::os::raw::c_void,
            p_elements: ::std::os::raw::c_int,
            p_tasks: ::std::os::raw::c_int,
            p_high_priority: GDExtensionBool,
            p_description: GDExtensionConstStringPtr,
        ) -> i64,
    >,
    pub worker_thread_pool_add_native_task: ::std::option::Option<
        unsafe extern "C" fn(
            p_instance: GDExtensionObjectPtr,
            p_func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
            p_userdata: *mut ::std::os::raw::c_void,
            p_high_priority: GDExtensionBool,
            p_description: GDExtensionConstStringPtr,
        ) -> i64,
    >,
    pub packed_byte_array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionTypePtr, p_index: GDExtensionInt) -> *mut u8,
    >,
    pub packed_byte_array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionConstTypePtr, p_index: GDExtensionInt) -> *const u8,
    >,
    pub packed_color_array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionTypePtr,
    >,
    pub packed_color_array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionTypePtr,
    >,
    pub packed_float32_array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionTypePtr, p_index: GDExtensionInt) -> *mut f32,
    >,
    pub packed_float32_array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_index: GDExtensionInt,
        ) -> *const f32,
    >,
    pub packed_float64_array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionTypePtr, p_index: GDExtensionInt) -> *mut f64,
    >,
    pub packed_float64_array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_index: GDExtensionInt,
        ) -> *const f64,
    >,
    pub packed_int32_array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionTypePtr, p_index: GDExtensionInt) -> *mut i32,
    >,
    pub packed_int32_array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_index: GDExtensionInt,
        ) -> *const i32,
    >,
    pub packed_int64_array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionTypePtr, p_index: GDExtensionInt) -> *mut i64,
    >,
    pub packed_int64_array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_index: GDExtensionInt,
        ) -> *const i64,
    >,
    pub packed_string_array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionStringPtr,
    >,
    pub packed_string_array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionStringPtr,
    >,
    pub packed_vector2_array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionTypePtr,
    >,
    pub packed_vector2_array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionTypePtr,
    >,
    pub packed_vector3_array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionTypePtr,
    >,
    pub packed_vector3_array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionTypePtr,
    >,
    pub array_operator_index: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionVariantPtr,
    >,
    pub array_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_index: GDExtensionInt,
        ) -> GDExtensionVariantPtr,
    >,
    pub array_ref: ::std::option::Option<
        unsafe extern "C" fn(p_self: GDExtensionTypePtr, p_from: GDExtensionConstTypePtr),
    >,
    pub array_set_typed: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionTypePtr,
            p_type: GDExtensionVariantType,
            p_class_name: GDExtensionConstStringNamePtr,
            p_script: GDExtensionConstVariantPtr,
        ),
    >,
    pub dictionary_operator_index: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionTypePtr,
            p_key: GDExtensionConstVariantPtr,
        ) -> GDExtensionVariantPtr,
    >,
    pub dictionary_operator_index_const: ::std::option::Option<
        unsafe extern "C" fn(
            p_self: GDExtensionConstTypePtr,
            p_key: GDExtensionConstVariantPtr,
        ) -> GDExtensionVariantPtr,
    >,
    pub object_method_bind_call: ::std::option::Option<
        unsafe extern "C" fn(
            p_method_bind: GDExtensionMethodBindPtr,
            p_instance: GDExtensionObjectPtr,
            p_args: *const GDExtensionConstVariantPtr,
            p_arg_count: GDExtensionInt,
            r_ret: GDExtensionVariantPtr,
            r_error: *mut GDExtensionCallError,
        ),
    >,
    pub object_method_bind_ptrcall: ::std::option::Option<
        unsafe extern "C" fn(
            p_method_bind: GDExtensionMethodBindPtr,
            p_instance: GDExtensionObjectPtr,
            p_args: *const GDExtensionConstTypePtr,
            r_ret: GDExtensionTypePtr,
        ),
    >,
    pub object_destroy: ::std::option::Option<unsafe extern "C" fn(p_o: GDExtensionObjectPtr)>,
    pub global_get_singleton: ::std::option::Option<
        unsafe extern "C" fn(p_name: GDExtensionConstStringNamePtr) -> GDExtensionObjectPtr,
    >,
    pub object_get_instance_binding: ::std::option::Option<
        unsafe extern "C" fn(
            p_o: GDExtensionObjectPtr,
            p_token: *mut ::std::os::raw::c_void,
            p_callbacks: *const GDExtensionInstanceBindingCallbacks,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub object_set_instance_binding: ::std::option::Option<
        unsafe extern "C" fn(
            p_o: GDExtensionObjectPtr,
            p_token: *mut ::std::os::raw::c_void,
            p_binding: *mut ::std::os::raw::c_void,
            p_callbacks: *const GDExtensionInstanceBindingCallbacks,
        ),
    >,
    pub object_set_instance: ::std::option::Option<
        unsafe extern "C" fn(
            p_o: GDExtensionObjectPtr,
            p_classname: GDExtensionConstStringNamePtr,
            p_instance: GDExtensionClassInstancePtr,
        ),
    >,
    pub object_cast_to: ::std::option::Option<
        unsafe extern "C" fn(
            p_object: GDExtensionConstObjectPtr,
            p_class_tag: *mut ::std::os::raw::c_void,
        ) -> GDExtensionObjectPtr,
    >,
    pub object_get_instance_from_id: ::std::option::Option<
        unsafe extern "C" fn(p_instance_id: GDObjectInstanceID) -> GDExtensionObjectPtr,
    >,
    pub object_get_instance_id: ::std::option::Option<
        unsafe extern "C" fn(p_object: GDExtensionConstObjectPtr) -> GDObjectInstanceID,
    >,
    pub ref_get_object: ::std::option::Option<
        unsafe extern "C" fn(p_ref: GDExtensionConstRefPtr) -> GDExtensionObjectPtr,
    >,
    pub ref_set_object: ::std::option::Option<
        unsafe extern "C" fn(p_ref: GDExtensionRefPtr, p_object: GDExtensionObjectPtr),
    >,
    pub script_instance_create: ::std::option::Option<
        unsafe extern "C" fn(
            p_info: *const GDExtensionScriptInstanceInfo,
            p_instance_data: GDExtensionScriptInstanceDataPtr,
        ) -> GDExtensionScriptInstancePtr,
    >,
    pub classdb_construct_object: ::std::option::Option<
        unsafe extern "C" fn(p_classname: GDExtensionConstStringNamePtr) -> GDExtensionObjectPtr,
    >,
    pub classdb_get_method_bind: ::std::option::Option<
        unsafe extern "C" fn(
            p_classname: GDExtensionConstStringNamePtr,
            p_methodname: GDExtensionConstStringNamePtr,
            p_hash: GDExtensionInt,
        ) -> GDExtensionMethodBindPtr,
    >,
    pub classdb_get_class_tag: ::std::option::Option<
        unsafe extern "C" fn(
            p_classname: GDExtensionConstStringNamePtr,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub classdb_register_extension_class: ::std::option::Option<
        unsafe extern "C" fn(
            p_library: GDExtensionClassLibraryPtr,
            p_class_name: GDExtensionConstStringNamePtr,
            p_parent_class_name: GDExtensionConstStringNamePtr,
            p_extension_funcs: *const GDExtensionClassCreationInfo,
        ),
    >,
    pub classdb_register_extension_class_method: ::std::option::Option<
        unsafe extern "C" fn(
            p_library: GDExtensionClassLibraryPtr,
            p_class_name: GDExtensionConstStringNamePtr,
            p_method_info: *const GDExtensionClassMethodInfo,
        ),
    >,
    pub classdb_register_extension_class_integer_constant: ::std::option::Option<
        unsafe extern "C" fn(
            p_library: GDExtensionClassLibraryPtr,
            p_class_name: GDExtensionConstStringNamePtr,
            p_enum_name: GDExtensionConstStringNamePtr,
            p_constant_name: GDExtensionConstStringNamePtr,
            p_constant_value: GDExtensionInt,
            p_is_bitfield: GDExtensionBool,
        ),
    >,
    pub classdb_register_extension_class_property: ::std::option::Option<
        unsafe extern "C" fn(
            p_library: GDExtensionClassLibraryPtr,
            p_class_name: GDExtensionConstStringNamePtr,
            p_info: *const GDExtensionPropertyInfo,
            p_setter: GDExtensionConstStringNamePtr,
            p_getter: GDExtensionConstStringNamePtr,
        ),
    >,
    pub classdb_register_extension_class_property_group: ::std::option::Option<
        unsafe extern "C" fn(
            p_library: GDExtensionClassLibraryPtr,
            p_class_name: GDExtensionConstStringNamePtr,
            p_group_name: GDExtensionConstStringPtr,
            p_prefix: GDExtensionConstStringPtr,
        ),
    >,
    pub classdb_register_extension_class_property_subgroup: ::std::option::Option<
        unsafe extern "C" fn(
            p_library: GDExtensionClassLibraryPtr,
            p_class_name: GDExtensionConstStringNamePtr,
            p_subgroup_name: GDExtensionConstStringPtr,
            p_prefix: GDExtensionConstStringPtr,
        ),
    >,
    pub classdb_register_extension_class_signal: ::std::option::Option<
        unsafe extern "C" fn(
            p_library: GDExtensionClassLibraryPtr,
            p_class_name: GDExtensionConstStringNamePtr,
            p_signal_name: GDExtensionConstStringNamePtr,
            p_argument_info: *const GDExtensionPropertyInfo,
            p_argument_count: GDExtensionInt,
        ),
    >,
    pub classdb_unregister_extension_class: ::std::option::Option<
        unsafe extern "C" fn(
            p_library: GDExtensionClassLibraryPtr,
            p_class_name: GDExtensionConstStringNamePtr,
        ),
    >,
    pub get_library_path: ::std::option::Option<
        unsafe extern "C" fn(p_library: GDExtensionClassLibraryPtr, r_path: GDExtensionStringPtr),
    >,
}
#[test]
fn bindgen_test_layout_GDExtensionInterface() {
    const UNINIT: ::std::mem::MaybeUninit<GDExtensionInterface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GDExtensionInterface>(),
        1080usize,
        concat!("Size of: ", stringify!(GDExtensionInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<GDExtensionInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(GDExtensionInterface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(version_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(version_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_patch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(version_patch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_string) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(version_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_alloc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(mem_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_realloc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(mem_realloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_free) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(mem_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_error) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(print_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_error_with_message) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(print_error_with_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_warning) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(print_warning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_warning_with_message) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(print_warning_with_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_script_error) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(print_script_error)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).print_script_error_with_message) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(print_script_error_with_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_native_struct_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(get_native_struct_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_new_copy) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_new_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_new_nil) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_new_nil)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_destroy) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_call) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_call)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_call_static) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_call_static)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_evaluate) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_evaluate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_set) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_set_named) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_set_named)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_set_keyed) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_set_keyed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_set_indexed) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_set_indexed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_named) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_named)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_keyed) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_keyed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_indexed) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_indexed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_iter_init) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_iter_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_iter_next) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_iter_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_iter_get) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_iter_get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_hash) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_recursive_hash) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_recursive_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_hash_compare) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_hash_compare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_booleanize) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_booleanize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_duplicate) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_duplicate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_stringify) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_stringify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_type) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_has_method) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_has_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_has_member) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_has_member)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_has_key) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_has_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_type_name) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_can_convert) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_can_convert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_can_convert_strict) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_can_convert_strict)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_variant_from_type_constructor) as usize - ptr as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(get_variant_from_type_constructor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_variant_to_type_constructor) as usize - ptr as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(get_variant_to_type_constructor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variant_get_ptr_operator_evaluator) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_operator_evaluator)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variant_get_ptr_builtin_method) as usize - ptr as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_builtin_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_ptr_constructor) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_constructor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_ptr_destructor) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_destructor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_construct) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_construct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_ptr_setter) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_setter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_ptr_getter) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_getter)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variant_get_ptr_indexed_setter) as usize - ptr as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_indexed_setter)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variant_get_ptr_indexed_getter) as usize - ptr as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_indexed_getter)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variant_get_ptr_keyed_setter) as usize - ptr as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_keyed_setter)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variant_get_ptr_keyed_getter) as usize - ptr as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_keyed_getter)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variant_get_ptr_keyed_checker) as usize - ptr as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_keyed_checker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_get_constant_value) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_constant_value)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variant_get_ptr_utility_function) as usize - ptr as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(variant_get_ptr_utility_function)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_new_with_latin1_chars) as usize - ptr as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_latin1_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_new_with_utf8_chars) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_utf8_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_new_with_utf16_chars) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_utf16_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_new_with_utf32_chars) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_utf32_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_new_with_wide_chars) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_wide_chars)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_new_with_latin1_chars_and_len) as usize
                - ptr as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_latin1_chars_and_len)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_new_with_utf8_chars_and_len) as usize - ptr as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_utf8_chars_and_len)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_new_with_utf16_chars_and_len) as usize - ptr as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_utf16_chars_and_len)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_new_with_utf32_chars_and_len) as usize - ptr as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_utf32_chars_and_len)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_new_with_wide_chars_and_len) as usize - ptr as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_new_with_wide_chars_and_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_to_latin1_chars) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_to_latin1_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_to_utf8_chars) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_to_utf8_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_to_utf16_chars) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_to_utf16_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_to_utf32_chars) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_to_utf32_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_to_wide_chars) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_to_wide_chars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_operator_index) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_operator_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_operator_index_const) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_operator_index_const)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_operator_plus_eq_string) as usize - ptr as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_operator_plus_eq_string)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_operator_plus_eq_char) as usize - ptr as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_operator_plus_eq_char)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_operator_plus_eq_cstr) as usize - ptr as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_operator_plus_eq_cstr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_operator_plus_eq_wcstr) as usize - ptr as usize
        },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_operator_plus_eq_wcstr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_operator_plus_eq_c32str) as usize - ptr as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(string_operator_plus_eq_c32str)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xml_parser_open_buffer) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(xml_parser_open_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_access_store_buffer) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(file_access_store_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_access_get_buffer) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(file_access_get_buffer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).worker_thread_pool_add_native_group_task) as usize
                - ptr as usize
        },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(worker_thread_pool_add_native_group_task)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).worker_thread_pool_add_native_task) as usize - ptr as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(worker_thread_pool_add_native_task)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_byte_array_operator_index) as usize - ptr as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_byte_array_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_byte_array_operator_index_const) as usize
                - ptr as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_byte_array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_color_array_operator_index) as usize - ptr as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_color_array_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_color_array_operator_index_const) as usize
                - ptr as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_color_array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_float32_array_operator_index) as usize - ptr as usize
        },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_float32_array_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_float32_array_operator_index_const) as usize
                - ptr as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_float32_array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_float64_array_operator_index) as usize - ptr as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_float64_array_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_float64_array_operator_index_const) as usize
                - ptr as usize
        },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_float64_array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_int32_array_operator_index) as usize - ptr as usize
        },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_int32_array_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_int32_array_operator_index_const) as usize
                - ptr as usize
        },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_int32_array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_int64_array_operator_index) as usize - ptr as usize
        },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_int64_array_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_int64_array_operator_index_const) as usize
                - ptr as usize
        },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_int64_array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_string_array_operator_index) as usize - ptr as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_string_array_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_string_array_operator_index_const) as usize
                - ptr as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_string_array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_vector2_array_operator_index) as usize - ptr as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_vector2_array_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_vector2_array_operator_index_const) as usize
                - ptr as usize
        },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_vector2_array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_vector3_array_operator_index) as usize - ptr as usize
        },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_vector3_array_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).packed_vector3_array_operator_index_const) as usize
                - ptr as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(packed_vector3_array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_operator_index) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(array_operator_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_operator_index_const) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(array_operator_index_const)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_ref) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(array_ref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_set_typed) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(array_set_typed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictionary_operator_index) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(dictionary_operator_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dictionary_operator_index_const) as usize - ptr as usize
        },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(dictionary_operator_index_const)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_method_bind_call) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(object_method_bind_call)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_method_bind_ptrcall) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(object_method_bind_ptrcall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_destroy) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(object_destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_get_singleton) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(global_get_singleton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_get_instance_binding) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(object_get_instance_binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_set_instance_binding) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(object_set_instance_binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_set_instance) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(object_set_instance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_cast_to) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(object_cast_to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_get_instance_from_id) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(object_get_instance_from_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_get_instance_id) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(object_get_instance_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_get_object) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(ref_get_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_set_object) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(ref_set_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).script_instance_create) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(script_instance_create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classdb_construct_object) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_construct_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classdb_get_method_bind) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_get_method_bind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).classdb_get_class_tag) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_get_class_tag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).classdb_register_extension_class) as usize - ptr as usize
        },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_register_extension_class)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).classdb_register_extension_class_method) as usize
                - ptr as usize
        },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_register_extension_class_method)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).classdb_register_extension_class_integer_constant) as usize
                - ptr as usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_register_extension_class_integer_constant)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).classdb_register_extension_class_property) as usize
                - ptr as usize
        },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_register_extension_class_property)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).classdb_register_extension_class_property_group) as usize
                - ptr as usize
        },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_register_extension_class_property_group)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).classdb_register_extension_class_property_subgroup) as usize
                - ptr as usize
        },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_register_extension_class_property_subgroup)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).classdb_register_extension_class_signal) as usize
                - ptr as usize
        },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_register_extension_class_signal)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).classdb_unregister_extension_class) as usize - ptr as usize
        },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(classdb_unregister_extension_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_library_path) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInterface),
            "::",
            stringify!(get_library_path)
        )
    );
}
pub const GDEXTENSION_INITIALIZATION_CORE: GDExtensionInitializationLevel = 0;
pub const GDEXTENSION_INITIALIZATION_SERVERS: GDExtensionInitializationLevel = 1;
pub const GDEXTENSION_INITIALIZATION_SCENE: GDExtensionInitializationLevel = 2;
pub const GDEXTENSION_INITIALIZATION_EDITOR: GDExtensionInitializationLevel = 3;
pub const GDEXTENSION_MAX_INITIALIZATION_LEVEL: GDExtensionInitializationLevel = 4;
pub type GDExtensionInitializationLevel = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GDExtensionInitialization {
    pub minimum_initialization_level: GDExtensionInitializationLevel,
    pub userdata: *mut ::std::os::raw::c_void,
    pub initialize: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            p_level: GDExtensionInitializationLevel,
        ),
    >,
    pub deinitialize: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            p_level: GDExtensionInitializationLevel,
        ),
    >,
}
#[test]
fn bindgen_test_layout_GDExtensionInitialization() {
    const UNINIT: ::std::mem::MaybeUninit<GDExtensionInitialization> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GDExtensionInitialization>(),
        32usize,
        concat!("Size of: ", stringify!(GDExtensionInitialization))
    );
    assert_eq!(
        ::std::mem::align_of::<GDExtensionInitialization>(),
        8usize,
        concat!("Alignment of ", stringify!(GDExtensionInitialization))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minimum_initialization_level) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInitialization),
            "::",
            stringify!(minimum_initialization_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInitialization),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInitialization),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deinitialize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GDExtensionInitialization),
            "::",
            stringify!(deinitialize)
        )
    );
}
pub type GDExtensionInitializationFunction = ::std::option::Option<
    unsafe extern "C" fn(
        p_interface: *const GDExtensionInterface,
        p_library: GDExtensionClassLibraryPtr,
        r_initialization: *mut GDExtensionInitialization,
    ) -> GDExtensionBool,
>;
