name: "Build Godot artifacts"

on:
  workflow_dispatch:
    inputs:
      godot-version:
        description: 'Version to build (for example "4.0.1")'
        required: true

defaults:
  run:
    shell: bash

jobs:
  # ----------------------------------------------------------------------------------------------------------------------------------------------
  generate-header:
    name: generate-header (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Order this way because macOS typically has the longest duration, followed by Windows, so it benefits total workflow execution time.
        # Additionally, the 'linux (msrv *)' special case will then be listed next to the other 'linux' jobs.
        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          - name: macos
            os: macos-11
            rust-toolchain: stable
            with-llvm: true

          - name: windows
            os: windows-latest
            rust-toolchain: stable-x86_64-pc-windows-msvc

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.
          - name: linux
            os: ubuntu-20.04
            rust-toolchain: stable

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Prepare versions"
        run: |
          version="${{ github.event.inputs.godot-version }}"
          bash res/set-godot-env.sh $version

      - name: "Download GDExtension header"
        run: |
          curl https://raw.githubusercontent.com/godotengine/godot/$GODOT4_VER/core/extension/gdextension_interface.h \
            -o input/gdextension_interface.h \
            --create-dirs \
            --retry 3
          echo "Output directory:"
          ls -la input
        shell: bash

      - name: "Line endings (Windows only)"
        if: ${{ runner.os == 'Windows' }}
        run: unix2dos input/gdextension_interface.h

      - name: "Apply GDExtension patch"
        run: git apply res/tweak.patch -v

      - name: "Install Rust"
        run: |
          rustup toolchain install stable --profile minimal --no-self-update ${{ steps.configure.outputs.components }}
          rustup default stable
          echo RUST_VER=$(rustc --version | sed -E "s/rustc ([^ ]+?) \\(.+/\\1/") >> $GITHUB_ENV

      - name: "Setup cache for Rust ${{ env.RUST_VER }}"
        uses: Swatinem/rust-cache@v2
        with:
          # A cache key that is used instead of the automatic `job`-based key, and is stable over multiple jobs.
          # default: empty
          shared-key: "${{ env.RUST_VER }}-${{ runner.os }}"

          # An additional cache key that is added alongside the automatic `job`-based
          # cache key and can be used to further differentiate jobs.
          # default: empty
          #key: ${{ inputs.cache-key }}

          # Determines if the cache should be saved even when the workflow has failed.
          # default: "false"
          cache-on-failure: true

      - name: "Set Rust environment variables"
        run: |
          echo CARGO_TERM_COLOR=always >> $GITHUB_ENV
          echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV
          echo RUST_BACKTRACE=1 >> $GITHUB_ENV

          rustc --version --verbose

      - name: "Install LLVM"
        if: ${{ matrix.with-llvm }}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: ${{ runner.temp }}/llvm

      - name: "Generate header using bindgen"
        run: |
          cd rust
          cargo build
          mv ../input ../output
          mv src/gen/* ../output/

      # Upload as short-lived artifact that can be consumed by dependent job
      - name: "Upload intermediate header as artifact"
        uses: actions/upload-artifact@v3
        with:
          name: internal-header-${{ matrix.name }}
          path: output
          retention-days: 1

  # ----------------------------------------------------------------------------------------------------------------------------------------------
  download-godot:
    runs-on: ubuntu-latest
    needs: generate-header
#    environment: Deploy
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Prepare versions"
        run: |
          version="${{ github.event.inputs.godot-version }}"
          bash res/set-godot-env.sh $version

      - name: "Download intermediate header artifact"
        uses: actions/download-artifact@v3
        with:
          name: internal-header-linux

      - name: "List dirs"
        run: |
          ls -la
          ls -la output || true
          ls -la internal-header-linux || true

      - name: "Download Godot ${{ env.GODOT4_VER }}"
        # for gdnative: wget --no-verbose "https://downloads.tuxfamily.org/godotengine/$filePath/Godot_v${{ inputs.godot_ver }}_linux_headless.64.zip" -O /tmp/godot.zip
        run: |          
          wget --no-verbose "https://downloads.tuxfamily.org/godotengine/$GODOT4_FILE_URL" -O ${{ runner.temp }}/godot.zip || {
            echo "::error::Godot version '$GODOT4_VER' not available online."
            exit 1
          }
          unzip -o ${{ runner.temp }}/godot.zip -d godot_bin
          echo "Godot directory:"
          ls -la godot_bin

      - name: "Check Godot version"
        run: $GODOT4_BIN --version

      - name: "Generate GDExtension API JSON"
        run: |
          cd output
          $GODOT4_BIN --dump-gdextension-interface
          echo "Output directory:"
          ls -la

