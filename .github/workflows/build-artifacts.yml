# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: "Build Godot artifacts"

on:
  workflow_dispatch:
    inputs:
      godot-version:
        description: 'Version to build (for example "4.0.1")'
        required: true

defaults:
  run:
    shell: bash

jobs:
  # ----------------------------------------------------------------------------------------------------------------------------------------------

  generate-header:
    name: generate-header (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Order this way because macOS typically has the longest duration, followed by Windows, so it benefits total workflow execution time.
        # Additionally, the 'linux (msrv *)' special case will then be listed next to the other 'linux' jobs.
        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          - name: macos
            os: macos-11
            rust-toolchain: stable
            with-llvm: true

          - name: windows
            os: windows-latest
            rust-toolchain: stable-x86_64-pc-windows-msvc

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.
          - name: linux
            os: ubuntu-20.04
            rust-toolchain: stable

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Prepare versions"
        run: |
          version="${{ github.event.inputs.godot-version }}"
          bash res/set-godot-env.sh $version "${{ runner.temp }}"

      - name: "Download GDExtension header"
        run: |
          curl https://raw.githubusercontent.com/godotengine/godot/$GODOT4_VER/core/extension/gdextension_interface.h \
            -o input/gdextension_interface.h \
            --create-dirs \
            --retry 3
          echo "Output directory:"
          ls -la input
        shell: bash

      - name: "Line endings (Windows only)"
        if: ${{ runner.os == 'Windows' }}
        run: unix2dos input/gdextension_interface.h

      - name: "Apply GDExtension patch"
        run: git apply res/tweak.patch -v

      - name: "Install Rust"
        run: |
          rustup toolchain install stable --profile minimal --no-self-update ${{ steps.configure.outputs.components }}
          rustup default stable
          echo RUST_VER=$(rustc --version | sed -E "s/rustc ([0-9.]+) \\(.+/\\1/" ) >> $GITHUB_ENV

      # Note: This is a replacement for Swatinem/rust-cache which doesn't work reliably at the moment.
      # The latter tries to save the cache under a different key than the one it restores, and even fails at doing so.
      - name: "Cache for Rust ${{ env.RUST_VER }}"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rust-${{ env.RUST_VER }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-rust-${{ env.RUST_VER }}-

#      - name: "Cache for Rust ${{ env.RUST_VER }}"
#        uses: Swatinem/rust-cache@v2
#        with:
#          # A cache key that is used instead of the automatic `job`-based key, and is stable over multiple jobs.
#          # default: empty
#          shared-key: "${{ env.RUST_VER }}-${{ runner.os }}"
#
#          # An additional cache key that is added alongside the automatic `job`-based
#          # cache key and can be used to further differentiate jobs.
#          # default: empty
#          #key: ${{ inputs.cache-key }}
#
#          # Determines if the cache should be saved even when the workflow has failed.
#          # default: "false"
##          cache-on-failure: true
#
#          # The cargo workspaces and target directory configuration.
#          # These entries are separated by newlines and have the form
#          # `$workspace -> $target`. The `$target` part is treated as a directory
#          # relative to the `$workspace` and defaults to "target" if not explicitly given.
#          # default: ". -> target"
#          workspaces: rust -> target

      - name: "Set Rust environment variables"
        run: |
          echo CARGO_TERM_COLOR=always >> $GITHUB_ENV
          echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV
          echo RUST_BACKTRACE=1 >> $GITHUB_ENV

          rustc --version --verbose

      - name: "Install LLVM"
        if: ${{ matrix.with-llvm }}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: ${{ runner.temp }}/llvm

      - name: "Generate header using bindgen"
        working-directory: rust
        run: |
          cargo build
          mv ../input ../output
          mv src/gen/* ../output/

      - name: "Diff"
        run: git diff

      - name: "Diff Cargo.toml"
        run: git diff rust/Cargo.toml

      - name: "Diff Cargo.lock"
        run: git diff rust/Cargo.lock

      - name: "Rename generated file according to platform"
        run: mv output/gdextension_interface.rs output/gdextension_interface_${{ matrix.name }}.rs

      # Upload as short-lived artifact that can be consumed by dependent job
      - name: "Upload intermediate header as artifact"
        uses: actions/upload-artifact@v3
        with:
          name: internal-header-${{ matrix.name }}
          path: output
          retention-days: 1

  # ----------------------------------------------------------------------------------------------------------------------------------------------

  download-godot:
    runs-on: ubuntu-latest
    needs: generate-header
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Prepare versions"
        run: |
          version="${{ github.event.inputs.godot-version }}"
          bash res/set-godot-env.sh $version "${{ runner.temp }}"
          echo "BINDGEN_VER=$(cargo tree -p bindgen --depth 0 | sed "s/bindgen v//")" >> $GITHUB_ENV

      - name: "Download intermediate header (Linux)"
        uses: actions/download-artifact@v3
        with:
          name: internal-header-linux
          path: output

      - name: "Download intermediate header (Windows)"
        uses: actions/download-artifact@v3
        with:
          name: internal-header-windows
          path: output

      - name: "Download intermediate header (macOS)"
        uses: actions/download-artifact@v3
        with:
          name: internal-header-macos
          path: output

      - name: "Download Godot ${{ env.GODOT4_VER }}"
        # for gdnative: wget --no-verbose "https://downloads.tuxfamily.org/godotengine/$filePath/Godot_v${{ inputs.godot_ver }}_linux_headless.64.zip" -O /tmp/godot.zip
        run: |          
          wget --no-verbose "https://downloads.tuxfamily.org/godotengine/$GODOT4_FILE_URL" -O ${{ runner.temp }}/godot.zip || {
            echo "::error::Godot version '$GODOT4_VER' not available online."
            exit 1
          }
          unzip -o ${{ runner.temp }}/godot.zip -d "$GODOT4_DIR"

      - name: "Check Godot version"
        run: $GODOT4_BIN --version

      - name: "Generate GDExtension API JSON"
        working-directory: output
        run: |
          $GODOT4_BIN --headless --dump-extension-api
          echo "Output directory:"
          ls -la

      - name: "Generate meta JSON"
        run: |
          bash res/output-meta-json.sh > output/meta.json
          echo "Output directory:"
          ls -la output

      - name: "Commit to branch '${{ env.GODOT4_VER }}'"
        working-directory: output
        run: |
          git config user.name "Godot-Rust Automation"
          git config user.email "GodotRust@users.noreply.github.com"
          git fetch
          git switch $GODOT4_VER || git switch -c $GODOT4_VER origin/lz
          # Remove all except 'output', move contents into current dir
          ls | grep -xv "output" | xargs rm -rf
          mv output/* .
          git add *
          git commit -m "Godot $GODOT4_VER artifact sync"
          git push -u origin $GODOT4_VER
